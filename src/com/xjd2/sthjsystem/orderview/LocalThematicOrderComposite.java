package com.xjd2.sthjsystem.orderview;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.FormLayout;
import com.vaadin.ui.ListSelect;
import com.vaadin.ui.PopupDateField;
import com.vaadin.ui.Select;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;

public class LocalThematicOrderComposite extends CustomComponent
{

    /*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

    @AutoGenerated
    private VerticalLayout mainLayout;
    @AutoGenerated
    private Button registButton;
    @AutoGenerated
    private PopupDateField endDateSelector;
    @AutoGenerated
    private PopupDateField startDateSelector;
    @AutoGenerated
    private TextField spaceScaleInput;
    @AutoGenerated
    // private ComboBox productTypeCombox;
    private ListSelect productTypesSelect;
    private FormLayout fl;

    /**
     * The constructor should first build the main layout, set the
     * composition root and then do any custom initialization.
     *
     * The constructor will not be automatically regenerated by the
     * visual editor.
     */
    public LocalThematicOrderComposite()
    {
        buildMainLayout();
        setCompositionRoot(mainLayout);

        // TODO add user code here
    }

    @AutoGenerated
    private VerticalLayout buildMainLayout()
    {
        // common part: create layout
        mainLayout = new VerticalLayout();
        mainLayout.setImmediate(false);
        mainLayout.setWidth("300px");
        mainLayout.setHeight("300px");
        mainLayout.setMargin(false);

        // top-level component properties
        setWidth("300px");
        setHeight("300px");

        fl = new FormLayout();
        fl.setImmediate(false);
        fl.setWidth("100%");
        fl.setHeight("100%");
        fl.setMargin(true);
        mainLayout.addComponent(fl);

        // productTypeCombox
        // productTypeCombox = new ComboBox();
        // productTypeCombox.setCaption("产品类型：");
        // productTypeCombox.setImmediate(false);
        // productTypeCombox.setWidth("100.0%");
        // productTypeCombox.setHeight("-1px");
        // fl.addComponent(productTypeCombox);

        // productTypesSelect
        productTypesSelect = new ListSelect();
        productTypesSelect.setCaption("产品类型：");
        productTypesSelect.addItem("生态系统类型面积变化率");
        productTypesSelect.addItem("景观破碎度");
        productTypesSelect.addItem("景观分离度");
        productTypesSelect.addItem("聚集度指数");
        productTypesSelect.addItem("景观多样性指数");
        productTypesSelect.addItem("人类活动干扰强度");
        productTypesSelect.addItem("生态系统宏观结构");
        productTypesSelect.addItem("水源涵养量");
        productTypesSelect.addItem("风蚀区土壤侵蚀模数");
        productTypesSelect.addItem("水蚀区土壤侵蚀模数");
        productTypesSelect.addItem("碳固定量");
        productTypesSelect.addItem("荒漠化指数");
        productTypesSelect.addItem("草地退化指数");
        productTypesSelect.addItem("植被水分利用效率");
        productTypesSelect.addItem("雪盖变化率");
        productTypesSelect.addItem("湖泊面积变化率");
        productTypesSelect.addItem("生态系统敏感性指数");
        productTypesSelect.addItem("生态系统稳定性指数");
        productTypesSelect.addItem("全球环境监测指数");
        productTypesSelect.addItem("草原干旱指数");
        productTypesSelect.setWidth("100%");
        productTypesSelect.setHeight("100%");
        fl.addComponent(productTypesSelect);
        // ListSelect select = new ListSelect("My Selection");

        // spaceScaleInput
        spaceScaleInput = new TextField();
        spaceScaleInput.setCaption("空间范围：");
        spaceScaleInput.setImmediate(false);
        spaceScaleInput.setWidth("100.0%");
        spaceScaleInput.setHeight("-1px");
        fl.addComponent(spaceScaleInput);

        // startDateSelector
        startDateSelector = new PopupDateField();
        startDateSelector.setCaption("开始时间：");
        startDateSelector.setImmediate(false);
        startDateSelector.setWidth("100.0%");
        startDateSelector.setHeight("-1px");
        fl.addComponent(startDateSelector);

        // endDateSelector
        endDateSelector = new PopupDateField();
        endDateSelector.setCaption("结束时间：");
        endDateSelector.setImmediate(false);
        endDateSelector.setWidth("100.0%");
        endDateSelector.setHeight("-1px");
        fl.addComponent(endDateSelector);

        // registButton
        registButton = new Button();
        registButton.setCaption("提交并注册");
        registButton.setImmediate(false);
        registButton.setWidth("-1px");
        registButton.setHeight("-1px");
        fl.addComponent(registButton);
        fl.setComponentAlignment(registButton, new Alignment(34));

        return mainLayout;
    }

}
