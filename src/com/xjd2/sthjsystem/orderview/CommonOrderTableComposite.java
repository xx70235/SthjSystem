package com.xjd2.sthjsystem.orderview;

import java.util.Date;
import java.util.List;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Item;
import com.vaadin.data.Property;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.util.BeanContainer;
import com.vaadin.data.util.BeanItem;
import com.vaadin.server.Sizeable;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.CheckBox;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.OptionGroup;
import com.vaadin.ui.Panel;
import com.vaadin.ui.Table;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.VerticalSplitPanel;
import com.xjd2.sthjsystem.instance.CommonProduct;
import com.xjd2.sthjsystem.instance.CommonProduct.ProductStatus;
import com.xjd2.sthjsystem.instance.ThematicOrder;

public class CommonOrderTableComposite extends CustomComponent
{

    /*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */
    @AutoGenerated
    private VerticalLayout mainLayout;
    @AutoGenerated
    private VerticalSplitPanel verticalSplitPanel_1;
    @AutoGenerated
    private Table commonProductTable;
    @AutoGenerated
    private Table commonProductDetailsTable;
    private Panel abovePanel;
    private Panel belowPanel;
    private CommonOrderTableViewInter presenter;
    /**
     * The constructor should first build the main layout, set the
     * composition root and then do any custom initialization.
     *
     * The constructor will not be automatically regenerated by the
     * visual editor.
     */
    public CommonOrderTableComposite()
    {
        buildMainLayout();
        setCompositionRoot(mainLayout);

        // TODO add user code here
    }

    @AutoGenerated
    private VerticalLayout buildMainLayout()
    {
        // common part: create layout
        mainLayout = new VerticalLayout();
        mainLayout.setImmediate(false);
        mainLayout.setWidth("100%");
        mainLayout.setHeight("100%");
        mainLayout.setMargin(false);
        
        // top-level component properties
        setWidth("100.0%");
        setHeight("100.0%");
        
        // verticalSplitPanel_1
        verticalSplitPanel_1 = buildVerticalSplitPanel_1();
        verticalSplitPanel_1.setSplitPosition(70, Sizeable.UNITS_PERCENTAGE);
        mainLayout.addComponent(verticalSplitPanel_1);
        mainLayout.setExpandRatio(verticalSplitPanel_1, 1.0f);
        
        return mainLayout;
    }

    @AutoGenerated
    private VerticalSplitPanel buildVerticalSplitPanel_1()
    {
        // common part: create layout
        verticalSplitPanel_1 = new VerticalSplitPanel();
        verticalSplitPanel_1.setImmediate(false);
        verticalSplitPanel_1.setWidth("100.0%");
        verticalSplitPanel_1.setHeight("100.0%");
        
        abovePanel = new Panel("共性产品查询结果");
        abovePanel.setImmediate(false);
        abovePanel.setWidth("100.0%");
        abovePanel.setHeight("100.0%");
        verticalSplitPanel_1.addComponent(abovePanel);
        
        // themticOrderTable
        commonProductTable = new Table();
        commonProductTable.setImmediate(false);
        commonProductTable.setWidth("100.0%");
        commonProductTable.setHeight("100.0%");
        abovePanel.setContent(commonProductTable);
        generateCommonProductTabel();
        
        belowPanel = new Panel("共性产品详细情况");
        belowPanel.setImmediate(false);
        belowPanel.setWidth("100.0%");
        belowPanel.setHeight("100.0%");
        verticalSplitPanel_1.addComponent(belowPanel);
        
        // commonOrderTable
        commonProductDetailsTable = new Table();
        commonProductDetailsTable.setImmediate(false);
        commonProductDetailsTable.setWidth("100.0%");
        commonProductDetailsTable.setHeight("100.0%");
        belowPanel.setContent(commonProductDetailsTable);
        generateCommonProductDetailsTabel();
        
        return verticalSplitPanel_1;
    }
    
    private void generateCommonProductTabel()
    {
//    	commonProductTable.setCaption("专题产品订单情况");
    	commonProductTable.setSelectable(true);
    	commonProductTable.setImmediate(true);
    	commonProductTable.addContainerProperty("id",String.class,  null);
    	commonProductTable.addContainerProperty("name",String.class,  null);
    	commonProductTable.addContainerProperty("type",String.class,  null);
    	commonProductTable.addContainerProperty("produceDate",Date.class,  null);
    	commonProductTable.addContainerProperty("coverRange",String.class,  null);
        
    	commonProductTable.setColumnHeader("id", "共性产品ID");
    	commonProductTable.setColumnHeader("name", "共性产品名称");
    	commonProductTable.setColumnHeader("type", "产品类型");
    	commonProductTable.setColumnHeader("coverRange", "空间覆盖范围");
    	commonProductTable.setColumnHeader("produceDate", "生产时间");
        
    	commonProductTable.addValueChangeListener(new Property.ValueChangeListener() {
            public void valueChange(ValueChangeEvent event) {
            	Object tmp=commonProductTable.getValue();
            	Item item  =  commonProductTable.getItem(tmp);
            	String id = (String)item.getItemProperty("id").getValue();
                presenter.queryCommonProductDetails(id);
                
            }
        });
        
    }
    
    private void generateCommonProductDetailsTabel()
    {
    	commonProductDetailsTable.setSelectable(true);
    	commonProductDetailsTable.setImmediate(true);
    	commonProductDetailsTable.addContainerProperty("id",String.class,  null);
    	commonProductDetailsTable.addContainerProperty("name",String.class,  null);
    	commonProductDetailsTable.addContainerProperty("produceDate",Date.class,  null);
    	commonProductDetailsTable.addContainerProperty("coverRange",String.class,  null);
    	commonProductDetailsTable.addContainerProperty("timeResolution",String.class,  null);
    	commonProductDetailsTable.addContainerProperty("spaceResolution",String.class,  null);
    	commonProductDetailsTable.addContainerProperty("precision",String.class,  null);
    	commonProductDetailsTable.addContainerProperty("npStatus",ProductStatus.class,  null);
    	commonProductDetailsTable.addContainerProperty("option",Button.class,  null);
        
    	commonProductDetailsTable.setColumnHeader("id", "共性产品ID");
    	commonProductDetailsTable.setColumnHeader("name", "共性产品名称");
    	commonProductDetailsTable.setColumnHeader("produceDate", "生产时间");
    	commonProductDetailsTable.setColumnHeader("coverRange", "覆盖范围");
    	commonProductDetailsTable.setColumnHeader("timeResolution", "时间分辨率");
    	commonProductDetailsTable.setColumnHeader("spaceResolution", "空间分辨率");
    	commonProductDetailsTable.setColumnHeader("precision", "产品精度");
    	commonProductDetailsTable.setColumnHeader("npStatus", "产品状态");
    	commonProductDetailsTable.setColumnHeader("option", "操作");
    }
    
    public void setPresenter(CommonOrderTableViewInter listener)
    {
       this.presenter = listener;
    }
    
    public void setCommonProductTableContent(List<CommonProduct> cps)
    {
    	commonProductTable.removeAllItems(); 
    	commonProductTable.setImmediate(true);
        for(CommonProduct cp:cps)
        {
            commonProductTable.addItem(new Object[] {cp.getId(),cp.getName(),cp.getType(),cp.getProduceDate(),cp.getCoverRange()}, cp.getId());
        }
    }
    
    public void setCommonProductDetailsTableContent(CommonProduct details)
    {
    	commonProductDetailsTable.removeAllItems();
        Button operateButton = new Button("订购");
            commonProductDetailsTable.addItem(new Object[] {details.getId(),details.getName(),details.getProduceDate(),details.getCoverRange(),details.getTimeResolution(),
            		details.getSpaceResolution()," ",details.getNpStatus(),operateButton},details.getId());
            
//        }
    }


}
